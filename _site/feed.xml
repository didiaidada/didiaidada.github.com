<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DanX</title>
    <description></description>
    <link>http://didiaidada.win//</link>
    <atom:link href="http://didiaidada.win//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 26 Mar 2016 17:56:23 +0800</pubDate>
    <lastBuildDate>Sat, 26 Mar 2016 17:56:23 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>HTML5原生拖放</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;拖放事件最关键的地方确定哪里发送了拖放事件，有哪些事件是在被拖放的元素上触发的，而有哪些事件是在放置目标上触发的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section&quot;&gt;推动元素触发的事件&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;dragstart - 按下鼠标时触发该事件&lt;/li&gt;
  &lt;li&gt;drag - 鼠标拖动期间持续触发&lt;/li&gt;
  &lt;li&gt;dragend - 拖动停止是触发&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;被拖动元素被放到一个有效的放置目标上，触发的事件&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;dragenter - 有元素被拖动到放置目标&lt;/li&gt;
  &lt;li&gt;dragover - 被拖动元素在放置目标内移动&lt;/li&gt;
  &lt;li&gt;dragleave或drop - 元素被放到了放置目标中&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有的元素不支持放置目标事件，需要重写dragenter和dragover的默认事件。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  &amp;lt;style&amp;gt;
    li{ width:100px; height:30px; border:1px #000000 solid; margin:20px; list-style:none;}
    #div1{ width:100px; height:100px; background:red; margin:300px;}

  &amp;lt;/style&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li draggable=&quot;true&quot;&amp;gt;dandan&amp;lt;/li&amp;gt;
  &amp;lt;li draggable=&quot;true&quot;&amp;gt;junjun&amp;lt;/li&amp;gt;
  &amp;lt;li draggable=&quot;true&quot;&amp;gt;jenny&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div id=&quot;div1&quot;&amp;gt;try&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
   var aLi = document.getElementsByTagName(&quot;li&quot;),
       oDiv = document.getElementById(&quot;div1&quot;),
       iNow = 0;



   for(var i=0;i&amp;lt;aLi.length;i++){
     aLi[i].ondragstart = function(){ //拖拽前触发

       this.style.background = &#39;yellow&#39;;

     };

     aLi[i].ondragend = function(){  //拖拽结束触发

       this.style.background = &#39;&#39;;

     };
   }
   oDiv.ondragenter = function(ev){  //相当于onmouseover

     this.style.background = &#39;green&#39;;

     ev.preventDefault();  //阻止默认事件：元素就可以释放了

   };

   oDiv.ondragleave = function(){  //相当于onmouseout

     this.style.background = &#39;red&#39;;

   };

   oDiv.ondragover = function(ev){ //进入目标、离开目标之间，连续触发

     ev.preventDefault();  //阻止默认事件：元素就可以释放了

     document.title = iNow++;

   };

   oDiv.ondrop = function(ev){  //释放鼠标的时候触发

     this.style.background = &#39;red&#39;;

     alert(&quot;鼠标已经释放&quot;);

     ev.preventDefault();  //阻止默认事件：防止打开拖拽元素的url

   };
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 26 Mar 2016 15:51:21 +0800</pubDate>
        <link>http://didiaidada.win//2016/03/26/html5%E7%94%9F%E6%8B%96%E6%8B%BD.html</link>
        <guid isPermaLink="true">http://didiaidada.win//2016/03/26/html5%E7%94%9F%E6%8B%96%E6%8B%BD.html</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>跨域你知多少</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;什么是跨域？&lt;/h4&gt;

&lt;h4 id=&quot;section-1&quot;&gt;这里的域指的是什么？&lt;/h4&gt;
&lt;p&gt;这里的域指的就是『同源策略』，同源策略限制了一个源（origin）中加载文本或脚本与来自其它源(origin)中资源的交互方式。这两个源必须是同协议，同域名，同端口。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;如何跨域？&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;目前比较推荐的有两种方法：CORS(Cross-Origin Resource Sharing),JSONP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;cors&quot;&gt;&lt;strong&gt;CORS&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;跨源资源共享的思想是使用自定义的HTTP头部信息让浏览器与服务器进行沟通，从而决定请求是失败还是成功。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;具体来说，让服务器通过新增响应Access-Control-Allow-Origin，通过HTTP方式来实现资源共享，它使用了HTTP交互方式来确定请求源是否有资格请求该资源，并通过设置HTTP Header来控制访问资源的权限的权限。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//case1:前端发送请求(前端所在的域名http://www.didiaidada.win)
var xhr = new XMLHttpRequest();
xhr.open(&quot;get&quot;,&quot;http://www.baidu.com/dan.json&quot;);
xhr.send();

//如果在服务器端设置HTTP响应头{Access-Control-Allow-Origin:&quot;http://www.baidu.com/&quot;},那么跨域请求成功。就是CORS的一个实现。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果要检测XHR是否支持CORS，最简单的方法是检查是否存在withCredentials属性(判断请求中是否有cookie)。&lt;/p&gt;

&lt;h4 id=&quot;jsonp&quot;&gt;&lt;strong&gt;JSONP&lt;/strong&gt;&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过jsonp跨域。也就是script标签跨域。script标签可以加载异域的JavaScript并执行，可以通过预先设定好的返回函数和母页面交互。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//原生JS的实现
&amp;lt;script&amp;gt;
var danTest = function(data){
   //可以访问data的相关属性，eg:data.name data.place
}
var url = &quot;http://www.didiaidada.win/json/test.html?callback=danTest&quot;;
var script = document.createElement(&#39;script&#39;);
script.setAttribute(&quot;src&quot;,url);
document.body.insertBefore(script,document.body.firstChild);
&amp;lt;/script&amp;gt;
//jQuery的实现
&amp;lt;script&amp;gt;
$.ajax({
    type: &quot;get&quot;,
    async: false,
    url: &quot;http://www.didiaidada.win/json/test.html&quot;,
    dataType: &quot;jsonp&quot;,
    jsonp: &quot;callback&quot;,//用以获得jsonp回调函数的参数名
    jsonpCallback: &quot;danTest&quot;,//自定义的jsonp回调函数名，默认为jQuery自动生成的随机函数名，也可以是“？”，jQuery会自动处理数据
    success: function(data){
    //可以访问data的相关属性，eg:data.name data.place
    },
    error: function(){
    //处理错误
    }
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;tips&quot;&gt;tips&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;jsonp只能处理get请求，CORS可以处理restful&lt;/li&gt;
  &lt;li&gt;虽然jQuery将jsonp作为ajax的一种进行了封装，但是二者本质上不同。ajax的核心是通过XMLHttpRequest获取非本页内容，而jsonp的核心是动态添加&lt;script&gt;标签来调用服务器提供的js脚本。&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;目前jsonp的应用最广，CORS还存在着浏览器的兼容性问题&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTML5新添加的window.postMessage(),window.name,document.domain也都可以一定程度上的实现跨域&lt;/p&gt;

    &lt;p&gt;XDM(cross-document messaging 夸文档消息传递)的核心是postMessage()，这个方法接受两个参数，一条消息和一个表示消息接收方来自哪个域的字符串。
接收到XDM消息时，会触发window对象的message事件。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//A的域名为“http://www.didiaidada.win”;B的域名为“http://www.baidu.com”,A要向B发送消息
//A的JS代码
window.postMessage(&quot;A secret&quot;,&quot;http://www.baidu.com&quot;);
   
//B的JS代码
EventUtil.addHandler(window,&quot;message&quot;,function(event){
     if(event.origin == &quot;http://www.didiaidada.win&quot;){
         processMessage(event.data);
         event.source.postMessage(&quot;received&quot;,&quot;http://www.didiaidada.win&quot;);
     }
})
   
   
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-3&quot;&gt;参考文献&lt;/h4&gt;
&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://my.oschina.net/blogshi/blog/303758&quot;&gt;Angular通过CORS实现跨域方案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003710973&quot;&gt;浏览器和服务器实现跨域（CORS）判定的原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003710973&quot;&gt;【原创】说说JSON和JSONP，也许你会豁然开朗，含jQuery用例&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 23 Mar 2016 17:10:43 +0800</pubDate>
        <link>http://didiaidada.win//2016/03/23/%E8%B7%A8%E5%9F%9F%E4%BD%A0%E7%9F%A5%E5%A4%9A%E5%B0%91.html</link>
        <guid isPermaLink="true">http://didiaidada.win//2016/03/23/%E8%B7%A8%E5%9F%9F%E4%BD%A0%E7%9F%A5%E5%A4%9A%E5%B0%91.html</guid>
        
        
      </item>
    
      <item>
        <title>JavaScript设计模式</title>
        <description>&lt;h2 id=&quot;javascript&quot;&gt;JavaScript设计模式简单解释&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JS设计模式按照功能可以分为三类：&lt;strong&gt;创建型设计模式&lt;/strong&gt;；&lt;strong&gt;构造型设计模式&lt;/strong&gt;；&lt;strong&gt;行为设计模式&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; 
1. 创建型设计模式：专注于处理对象的创建机制，以适合给定情况的方式创建对象。主要包括工厂模式，单例模式，构造器模式。
 &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//工厂模式
function createObject(name, age, profession){
    var obj = new Object();
    obj.name = name;
    obj.age = age;
    obj.profession = profession;
    obj.move = function(){
        return this.name + &#39; at &#39; + this.age + &#39; engaged in &#39; + this.profession;
    };
    return obj;
}


//构造器模式
function Car(model,year,miles){//构造函数模式
        this.model = model;
        this.year = year;
        this.miles = miles;
        this.run = function () {
            return this.model + &quot; has done &quot; + this.miles + &quot;miles&quot;;
        }
    }
 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
 工厂模式用于解决实例化对象大量重复的问题，好处是：可以消除对象之间的耦合，防止代码重复。但是无法识别对象的具体类型。
 构造函数模式解决了重复实例化的问题，又解决了对象识别问题。
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//单例模式
var single = ( function(){
    var unique;
    function getInstance(){
        if( unique === undefined ){
           unique = new Construct(); 
        }
        reutrn unique;
    }
    function Construct(){
    //生成单例构造函数模式
    }
    return {
        getInstance : getInstance
    }
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
单例模式限制了类的实例化次数只能是一次，在JS中用于划分命名空间。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;构造型设计模式： 与对象组合有关，通常用于找出不同对象之间建立关系的简单方法。主要包括外观模式，适配器模式，代理模式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;行为设计模式：主要用于改善或简化不同对象之间的通信。主要包括中介者模式，观察者模式。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 09:42:06 +0800</pubDate>
        <link>http://didiaidada.win//javascript/2016/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://didiaidada.win//javascript/2016/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</guid>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Web推送</title>
        <description>&lt;h2 id=&quot;webdata&quot;&gt;Web应用从服务器主动推送Data到客户端有哪些方式&lt;/h2&gt;

&lt;h3 id=&quot;javascript&quot;&gt;JavaScript数据推送&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;commet: 基于HTTP长连接服务器推送技术&lt;/li&gt;
  &lt;li&gt;基于WebSocket的推送方案&lt;/li&gt;
  &lt;li&gt;SSE(Server-Send Event) ：服务器推送数据方式&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 20 Mar 2016 19:51:18 +0800</pubDate>
        <link>http://didiaidada.win//javascript/web/2016/03/20/pull.html</link>
        <guid isPermaLink="true">http://didiaidada.win//javascript/web/2016/03/20/pull.html</guid>
        
        
        <category>JavaScript</category>
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>my new blog</title>
        <description>&lt;p&gt;终于把我的博客从CSDN上迁出来了，目前是利用Jekyll在github pages上部署。
感触有两点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;利用Bash在Mac上安装Jekyll若遇到问题，要先更新Xcode&lt;/li&gt;
  &lt;li&gt;目前用的博客模板是默认的，接下来会做更改。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 13 Mar 2016 17:02:42 +0800</pubDate>
        <link>http://didiaidada.win//jekyll/2016/03/13/2016-03-13-new.html</link>
        <guid isPermaLink="true">http://didiaidada.win//jekyll/2016/03/13/2016-03-13-new.html</guid>
        
        
        <category>Jekyll</category>
        
      </item>
    
  </channel>
</rss>
