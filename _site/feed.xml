<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DanX</title>
    <description></description>
    <link>http://didiaidada.win//</link>
    <atom:link href="http://didiaidada.win//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 22 Mar 2016 12:39:48 +0800</pubDate>
    <lastBuildDate>Tue, 22 Mar 2016 12:39:48 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>JavaScript设计模式</title>
        <description>&lt;h2 id=&quot;javascript&quot;&gt;JavaScript设计模式简单解释&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JS设计模式按照功能可以分为三类：&lt;strong&gt;创建型设计模式&lt;/strong&gt;；&lt;strong&gt;构造型设计模式&lt;/strong&gt;；&lt;strong&gt;行为设计模式&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; 
1. 创建型设计模式：专注于处理对象的创建机制，以适合给定情况的方式创建对象。主要包括工厂模式，单例模式，构造器模式。
 &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//工厂模式
function createObject(name, age, profession){
    var obj = new Object();
    obj.name = name;
    obj.age = age;
    obj.profession = profession;
    obj.move = function(){
        return this.name + &#39; at &#39; + this.age + &#39; engaged in &#39; + this.profession;
    };
    return obj;
}


//构造器模式
function Car(model,year,miles){//构造函数模式
        this.model = model;
        this.year = year;
        this.miles = miles;
        this.run = function () {
            return this.model + &quot; has done &quot; + this.miles + &quot;miles&quot;;
        }
    }
 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
 工厂模式用于解决实例化对象大量重复的问题，好处是：可以消除对象之间的耦合，防止代码重复。但是无法识别对象的具体类型。
 构造函数模式解决了重复实例化的问题，又解决了对象识别问题。
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//单例模式
var single = ( function(){
    var unique;
    function getInstance(){
        if( unique === undefined ){
           unique = new Construct(); 
        }
        reutrn unique;
    }
    function Construct(){
    //生成单例构造函数模式
    }
    return {
        getInstance : getInstance
    }
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
单例模式限制了类的实例化次数只能是一次，在JS中用于划分命名空间。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;构造型设计模式： 与对象组合有关，通常用于找出不同对象之间建立关系的简单方法。主要包括外观模式，适配器模式，代理模式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;行为设计模式：主要用于改善或简化不同对象之间的通信。主要包括中介者模式，观察者模式。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 09:42:06 +0800</pubDate>
        <link>http://didiaidada.win//javascript/2016/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://didiaidada.win//javascript/2016/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</guid>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Test10</title>
        <description>
</description>
        <pubDate>Sun, 20 Mar 2016 21:40:12 +0800</pubDate>
        <link>http://didiaidada.win//2016/03/20/test10.html</link>
        <guid isPermaLink="true">http://didiaidada.win//2016/03/20/test10.html</guid>
        
        
      </item>
    
      <item>
        <title>Test9</title>
        <description>
</description>
        <pubDate>Sun, 20 Mar 2016 21:40:01 +0800</pubDate>
        <link>http://didiaidada.win//2016/03/20/test9.html</link>
        <guid isPermaLink="true">http://didiaidada.win//2016/03/20/test9.html</guid>
        
        
      </item>
    
      <item>
        <title>Test8</title>
        <description>
</description>
        <pubDate>Sun, 20 Mar 2016 21:39:53 +0800</pubDate>
        <link>http://didiaidada.win//2016/03/20/test8.html</link>
        <guid isPermaLink="true">http://didiaidada.win//2016/03/20/test8.html</guid>
        
        
      </item>
    
      <item>
        <title>Test7</title>
        <description>
</description>
        <pubDate>Sun, 20 Mar 2016 21:39:39 +0800</pubDate>
        <link>http://didiaidada.win//2016/03/20/test7.html</link>
        <guid isPermaLink="true">http://didiaidada.win//2016/03/20/test7.html</guid>
        
        
      </item>
    
      <item>
        <title>Test6</title>
        <description>
</description>
        <pubDate>Sun, 20 Mar 2016 21:39:30 +0800</pubDate>
        <link>http://didiaidada.win//2016/03/20/test6.html</link>
        <guid isPermaLink="true">http://didiaidada.win//2016/03/20/test6.html</guid>
        
        
      </item>
    
      <item>
        <title>test</title>
        <description>
</description>
        <pubDate>Sun, 20 Mar 2016 21:38:26 +0800</pubDate>
        <link>http://didiaidada.win//test/2016/03/20/test5.html</link>
        <guid isPermaLink="true">http://didiaidada.win//test/2016/03/20/test5.html</guid>
        
        <category>test</category>
        
        
        <category>test</category>
        
      </item>
    
      <item>
        <title>test4</title>
        <description>
</description>
        <pubDate>Sun, 20 Mar 2016 21:38:15 +0800</pubDate>
        <link>http://didiaidada.win//test/2016/03/20/test4.html</link>
        <guid isPermaLink="true">http://didiaidada.win//test/2016/03/20/test4.html</guid>
        
        
        <category>test</category>
        
      </item>
    
      <item>
        <title>test3</title>
        <description>
</description>
        <pubDate>Sun, 20 Mar 2016 21:37:41 +0800</pubDate>
        <link>http://didiaidada.win//test3/2016/03/20/test3.html</link>
        <guid isPermaLink="true">http://didiaidada.win//test3/2016/03/20/test3.html</guid>
        
        <category>test3</category>
        
        
        <category>test3</category>
        
      </item>
    
      <item>
        <title>test2</title>
        <description>
</description>
        <pubDate>Sun, 20 Mar 2016 21:37:27 +0800</pubDate>
        <link>http://didiaidada.win//test2/2016/03/20/test2.html</link>
        <guid isPermaLink="true">http://didiaidada.win//test2/2016/03/20/test2.html</guid>
        
        <category>test2</category>
        
        
        <category>test2</category>
        
      </item>
    
  </channel>
</rss>
